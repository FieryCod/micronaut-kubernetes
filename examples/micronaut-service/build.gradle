import org.gradle.nativeplatform.platform.OperatingSystem
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id "io.spring.dependency-management"
    id "com.github.johnrengelman.shadow"
    id "application"
    id "com.google.cloud.tools.jib" version "0.9.9"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.20"
    id "net.ltgt.apt-idea" version "0.20"
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:${micronautVersion}"
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile 'io.micronaut:micronaut-management'

    compile project(':kubernetes-discovery-client')

    runtime "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "micronaut.service.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

OperatingSystem os = DefaultNativePlatform.currentOperatingSystem

jib {
    from {
//        image = 'gcr.io/distroless/java:debug'
        image = 'alvarosanchez/alpine-with-curl'
    }
    to {
        image = System.getenv('CI') ? 'registry.hub.docker.com/alvarosanchez/example-service' : 'micronaut-kubernetes-example-service'
        if (os.isMacOsX()) {
            credHelper = 'osxkeychain'
        }
    }
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
