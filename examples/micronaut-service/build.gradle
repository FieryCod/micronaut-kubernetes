import org.gradle.nativeplatform.platform.OperatingSystem
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id "com.google.cloud.tools.jib" version "1.7.0"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation 'io.micronaut:micronaut-management'

    implementation project(':kubernetes-discovery-client')

    runtimeOnly("ch.qos.logback:logback-classic:1.2.3")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

test.classpath += configurations.developmentOnly


shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

mainClassName = "micronaut.service.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

OperatingSystem os = DefaultNativePlatform.currentOperatingSystem

jib {
    from {
//        image = 'gcr.io/distroless/java:debug'
        image = 'alvarosanchez/alpine-with-curl'
    }
    to {
        image = System.getenv('CI') ? 'registry.hub.docker.com/alvarosanchez/example-service' : 'micronaut-kubernetes-example-service'
        if (os.isMacOsX()) {
            credHelper = 'osxkeychain'
        }
    }
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
